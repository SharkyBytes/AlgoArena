class DisjointSet{
    vector<long long> parent, siz;
    public:
    DisjointSet(int n){
        parent.resize(n,0);
        siz.resize(n,0);
        for(int i=0; i< n ; i++){
            parent[i]=i;
            siz[i]=1;
        }
    }

    int findp(int node){
        if(node==parent[node]){
            return node;
        }
        return parent[node]=findp(parent[node]);
    }

    void uni(int u, int v){
        int pu=findp(u);
        int pv=findp(v);
        if(pu == pv) return;

        if(siz[pu]<siz[pv]){
            parent[pu]=pv;
            siz[pv]+=siz[pu];
        }
        else{
            parent[pv]=pu;
            siz[pu]+=siz[pv];
        }
    }

    int getsize(int node){
        int pnode=findp(node);
        return siz[pnode];
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& arr, vector<int>& initial) {
        int n=arr.size();
        
        DisjointSet ds(n);

       
        for(int i=0; i< n ; i++){
            for(int j=0; j< n ; j++){
                if(arr[i][j]==1){
                    ds.uni(i, j);
                }
            }
        }

        map<int,int> mp; 
        for(auto it : initial){
            int pit=ds.findp(it);
            mp[pit]++;
        }

        int q=0; 
        int nd=1e5;

        for(int i=0; i<initial.size() ; i++){
            int x=ds.findp(initial[i]);
            int savedSize = ds.getsize(x);

            if(mp[x]==1){
                if(savedSize > q){
                    q = savedSize;
                    nd = initial[i];
                }
                else if(savedSize == q && initial[i] < nd){
                    nd = initial[i];
                }
            }
        }

        if(q == 0){ 
            nd = *min_element(initial.begin(), initial.end());
        }

        return nd;
    }
};
